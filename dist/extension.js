/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// source/extension.js
var extension_exports = {};
__export(extension_exports, {
  activate: () => activate,
  deactivate: () => deactivate
});
module.exports = __toCommonJS(extension_exports);
var prettier = __toESM(require("prettier"));
var vscode = __toESM(require("vscode"));
function activate(context) {
  const markdownFormatter = vscode.languages.registerDocumentFormattingEditProvider(
    "markdown",
    {
      async provideDocumentFormattingEdits(document) {
        const range = new vscode.Range(0, 0, Number.MAX_VALUE, Number.MAX_VALUE);
        const content = document.getText(range);
        const formatted = await prettier.format(content, {
          parser: "markdown",
          proseWrap: "never",
          useTabs: false,
          tabWidth: 2,
          singleQuote: false,
          endOfLine: "lf",
          embeddedLanguageFormatting: "auto"
        });
        return [vscode.TextEdit.replace(range, formatted)];
      }
    }
  );
  context.subscriptions.push(markdownFormatter);
}
__name(activate, "activate");
function deactivate() {
}
__name(deactivate, "deactivate");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  activate,
  deactivate
});
